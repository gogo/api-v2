// Code generated by protoc-gen-go. DO NOT EDIT.
// source: casttype.proto

package casttype

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	sync "sync"
)

const (
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 0)
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(0 - protoimpl.MinVersion)
)

type Castaway struct {
	Int32Ptr             *int64                  `protobuf:"varint,1,opt,name=Int32Ptr" json:"Int32Ptr,omitempty"`
	Int32                *int64                  `protobuf:"varint,2,opt,name=Int32" json:"Int32,omitempty"`
	MyUint64Ptr          *uint64                 `protobuf:"varint,3,opt,name=MyUint64Ptr" json:"MyUint64Ptr,omitempty"`
	MyUint64             *uint64                 `protobuf:"varint,4,opt,name=MyUint64" json:"MyUint64,omitempty"`
	MyFloat32Ptr         *float32                `protobuf:"fixed32,5,opt,name=MyFloat32Ptr" json:"MyFloat32Ptr,omitempty"`
	MyFloat32            *float32                `protobuf:"fixed32,6,opt,name=MyFloat32" json:"MyFloat32,omitempty"`
	MyFloat64Ptr         *float64                `protobuf:"fixed64,7,opt,name=MyFloat64Ptr" json:"MyFloat64Ptr,omitempty"`
	MyFloat64            *float64                `protobuf:"fixed64,8,opt,name=MyFloat64" json:"MyFloat64,omitempty"`
	MyBytes              []byte                  `protobuf:"bytes,9,opt,name=MyBytes" json:"MyBytes,omitempty"`
	NormalBytes          []byte                  `protobuf:"bytes,10,opt,name=NormalBytes" json:"NormalBytes,omitempty"`
	MyUint64S            []uint64                `protobuf:"varint,11,rep,name=MyUint64s" json:"MyUint64s,omitempty"`
	MyMap                map[string]uint64       `protobuf:"bytes,12,rep,name=MyMap" json:"MyMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MyCustomMap          map[string]uint64       `protobuf:"bytes,13,rep,name=MyCustomMap" json:"MyCustomMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MyNullableMap        map[int32]*Wilson       `protobuf:"bytes,14,rep,name=MyNullableMap" json:"MyNullableMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MyEmbeddedMap        map[int32]*Wilson       `protobuf:"bytes,15,rep,name=MyEmbeddedMap" json:"MyEmbeddedMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	String_              *string                 `protobuf:"bytes,16,opt,name=String" json:"String,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     protoimpl.UnknownFields `json:"-"`
	XXX_sizecache        protoimpl.SizeCache     `json:"-"`
}

func (x *Castaway) Reset() {
	*x = Castaway{}
}

func (x *Castaway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Castaway) ProtoMessage() {}

func (x *Castaway) ProtoReflect() protoreflect.Message {
	return file_casttype_proto_msgTypes[0].MessageOf(x)
}

func (m *Castaway) XXX_Methods() *protoiface.Methods {
	return file_casttype_proto_msgTypes[0].Methods()
}

// Deprecated: Use Castaway.ProtoReflect.Type instead.
func (*Castaway) Descriptor() ([]byte, []int) {
	return file_casttype_proto_rawDescGZIP(), []int{0}
}

func (x *Castaway) GetInt32Ptr() int64 {
	if x != nil && x.Int32Ptr != nil {
		return *x.Int32Ptr
	}
	return 0
}

func (x *Castaway) GetInt32() int64 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *Castaway) GetMyUint64Ptr() uint64 {
	if x != nil && x.MyUint64Ptr != nil {
		return *x.MyUint64Ptr
	}
	return 0
}

func (x *Castaway) GetMyUint64() uint64 {
	if x != nil && x.MyUint64 != nil {
		return *x.MyUint64
	}
	return 0
}

func (x *Castaway) GetMyFloat32Ptr() float32 {
	if x != nil && x.MyFloat32Ptr != nil {
		return *x.MyFloat32Ptr
	}
	return 0
}

func (x *Castaway) GetMyFloat32() float32 {
	if x != nil && x.MyFloat32 != nil {
		return *x.MyFloat32
	}
	return 0
}

func (x *Castaway) GetMyFloat64Ptr() float64 {
	if x != nil && x.MyFloat64Ptr != nil {
		return *x.MyFloat64Ptr
	}
	return 0
}

func (x *Castaway) GetMyFloat64() float64 {
	if x != nil && x.MyFloat64 != nil {
		return *x.MyFloat64
	}
	return 0
}

func (x *Castaway) GetMyBytes() []byte {
	if x != nil {
		return x.MyBytes
	}
	return nil
}

func (x *Castaway) GetNormalBytes() []byte {
	if x != nil {
		return x.NormalBytes
	}
	return nil
}

func (x *Castaway) GetMyUint64S() []uint64 {
	if x != nil {
		return x.MyUint64S
	}
	return nil
}

func (x *Castaway) GetMyMap() map[string]uint64 {
	if x != nil {
		return x.MyMap
	}
	return nil
}

func (x *Castaway) GetMyCustomMap() map[string]uint64 {
	if x != nil {
		return x.MyCustomMap
	}
	return nil
}

func (x *Castaway) GetMyNullableMap() map[int32]*Wilson {
	if x != nil {
		return x.MyNullableMap
	}
	return nil
}

func (x *Castaway) GetMyEmbeddedMap() map[int32]*Wilson {
	if x != nil {
		return x.MyEmbeddedMap
	}
	return nil
}

func (x *Castaway) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type Wilson struct {
	Int64                *int64                  `protobuf:"varint,1,opt,name=Int64" json:"Int64,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     protoimpl.UnknownFields `json:"-"`
	XXX_sizecache        protoimpl.SizeCache     `json:"-"`
}

func (x *Wilson) Reset() {
	*x = Wilson{}
}

func (x *Wilson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wilson) ProtoMessage() {}

func (x *Wilson) ProtoReflect() protoreflect.Message {
	return file_casttype_proto_msgTypes[1].MessageOf(x)
}

func (m *Wilson) XXX_Methods() *protoiface.Methods {
	return file_casttype_proto_msgTypes[1].Methods()
}

// Deprecated: Use Wilson.ProtoReflect.Type instead.
func (*Wilson) Descriptor() ([]byte, []int) {
	return file_casttype_proto_rawDescGZIP(), []int{1}
}

func (x *Wilson) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

var File_casttype_proto protoreflect.FileDescriptor

var file_casttype_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x0d, 0x0a, 0x08, 0x43, 0x61,
	0x73, 0x74, 0x61, 0x77, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xde, 0x1f, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x74, 0x72, 0x12, 0x23, 0x0a,
	0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xfa, 0xde,
	0x1f, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x59, 0x0a, 0x0b, 0x4d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x74,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x37, 0xfa, 0xde, 0x1f, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x4d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72, 0x12, 0x57, 0x0a,
	0x08, 0x4d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x3b, 0xfa, 0xde, 0x1f, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x4d, 0x79,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5c, 0x0a, 0x0c, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x50, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x38, 0xfa, 0xde,
	0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x50, 0x74, 0x72, 0x12, 0x5a, 0x0a, 0x09, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x3c, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x54, 0x79, 0x70,
	0x65, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x12, 0x5c, 0x0a, 0x0c, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72, 0x12, 0x5a,
	0x0a, 0x09, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x3c, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x54, 0x79, 0x70, 0x65, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x09, 0x4d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x4a, 0x0a, 0x07, 0x4d, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x30, 0xfa, 0xde, 0x1f,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63,
	0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x07, 0x4d,
	0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x4d, 0x79, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x42, 0x37, 0xfa, 0xde, 0x1f,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63,
	0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12,
	0x69, 0x0a, 0x05, 0x4d, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x61, 0x77,
	0x61, 0x79, 0x2e, 0x4d, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x34, 0xfa,
	0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x4d, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x4d, 0x79, 0x4d, 0x61, 0x70, 0x12, 0xb5, 0x01, 0x0a, 0x0b, 0x4d,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x74,
	0x61, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6e, 0x82, 0xdf, 0x1f, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x8a, 0xdf,
	0x1f, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d,
	0x61, 0x70, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x4d, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61, 0x73,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x4d,
	0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x36, 0x82, 0xdf, 0x1f, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x4d, 0x79, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x4d, 0x79, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x74,
	0x61, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x79, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3a, 0x82, 0xdf, 0x1f, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x79, 0x70, 0x65, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x0d, 0x4d, 0x79, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d,
	0x61, 0x70, 0x12, 0x4f, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xfa, 0xde, 0x1f, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x4d, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a,
	0x12, 0x4d, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x57, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x52, 0x0a, 0x12, 0x4d, 0x79, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x73, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x57, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1e, 0x0a, 0x06, 0x57, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x4c, 0xd8, 0xe1, 0x1e, 0x00, 0xd0, 0xe1, 0x1e, 0x00, 0xc8,
	0xe1, 0x1e, 0x00, 0xa8, 0xe2, 0x1e, 0x01, 0xe0, 0xe1, 0x1e, 0x01, 0x80, 0xe2, 0x1e, 0x01, 0xf0,
	0xe1, 0x1e, 0x01, 0xe8, 0xe1, 0x1e, 0x01, 0xb0, 0xe2, 0x1e, 0x01, 0xb8, 0xe2, 0x1e, 0x01, 0xf8,
	0xe1, 0x1e, 0x01, 0xc0, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x00, 0xc8, 0xe2, 0x1e, 0x00, 0xe0,
	0xe2, 0x1e, 0x01, 0xe8, 0xe2, 0x1e, 0x00, 0xf0, 0xe2, 0x1e, 0x01, 0xf8, 0xe2, 0x1e, 0x00, 0x80,
	0xe3, 0x1e, 0x00,
}

var (
	file_casttype_proto_rawDescOnce sync.Once
	file_casttype_proto_rawDescData = file_casttype_proto_rawDesc
)

func file_casttype_proto_rawDescGZIP() []byte {
	file_casttype_proto_rawDescOnce.Do(func() {
		file_casttype_proto_rawDescData = protoimpl.X.CompressGZIP(file_casttype_proto_rawDescData)
	})
	return file_casttype_proto_rawDescData
}

var file_casttype_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_casttype_proto_goTypes = []interface{}{
	(*Castaway)(nil), // 0: casttype.Castaway
	(*Wilson)(nil),   // 1: casttype.Wilson
	nil,              // 2: casttype.Castaway.MyMapEntry
	nil,              // 3: casttype.Castaway.MyCustomMapEntry
	nil,              // 4: casttype.Castaway.MyNullableMapEntry
	nil,              // 5: casttype.Castaway.MyEmbeddedMapEntry
}
var file_casttype_proto_depIdxs = []int32{
	2, // casttype.Castaway.MyMap:type_name -> casttype.Castaway.MyMapEntry
	3, // casttype.Castaway.MyCustomMap:type_name -> casttype.Castaway.MyCustomMapEntry
	4, // casttype.Castaway.MyNullableMap:type_name -> casttype.Castaway.MyNullableMapEntry
	5, // casttype.Castaway.MyEmbeddedMap:type_name -> casttype.Castaway.MyEmbeddedMapEntry
	1, // casttype.Castaway.MyNullableMapEntry.value:type_name -> casttype.Wilson
	1, // casttype.Castaway.MyEmbeddedMapEntry.value:type_name -> casttype.Wilson
	6, // starting offset of method output_type sub-list
	6, // starting offset of method input_type sub-list
	6, // starting offset of extension type_name sub-list
	6, // starting offset of extension extendee sub-list
	0, // starting offset of field type_name sub-list
}

func init() { file_casttype_proto_init() }
func file_casttype_proto_init() {
	if File_casttype_proto != nil {
		return
	}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			RawDescriptor: file_casttype_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_casttype_proto_goTypes,
		DependencyIndexes: file_casttype_proto_depIdxs,
		MessageInfos:      file_casttype_proto_msgTypes,
	}.Build()
	File_casttype_proto = out.File
	file_casttype_proto_rawDesc = nil
	file_casttype_proto_goTypes = nil
	file_casttype_proto_depIdxs = nil
}
